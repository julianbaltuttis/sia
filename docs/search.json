[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "testing-quarto",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n\n\n\n\n\n\n\n  \n\n\n\n\nCreate a new Vue Project\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nInstalling Vue using Scoop\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nTesting JavaScript Code in IntelliJ\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nIntroduction to Vue Components\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Create a new Vue Project.html",
    "href": "Create a new Vue Project.html",
    "title": "Create a new Vue Project",
    "section": "",
    "text": "Create a new Vue Project\nCreating a new Vue project is a straightforward process that offers flexibility in terms of command-line or browser-based approaches. Whether you prefer using PowerShell or Vue UI, this guide will walk you through the steps to create a new Vue project, allowing you to start building dynamic and interactive web applications using Vue.js.\n\nCreate a new Vue project\n\nOpen PowerShell or a command prompt.\nNavigate to the folder where you want to create your project.\nRun the following command:\nvue create project-name\nReplace project-name with the desired name for your project.\nChoose an installation option by selecting from the available presets or manually selecting features.\nOnce the project is created, navigate into the project folder using cd project-name.\nTo run the application, use the command:\nyarn serve\nThis will start a development server, and you can access your Vue application in the browser.\n\n\n\nCreate a Vue project using Vue UI\n\nOpen PowerShell or a command prompt.\nRun the following command:\nvue ui\nThis will start the Vue UI interface in your default browser.\nFollow the on-screen instructions to set up a new project using the Vue UI. You can create a project from scratch or import an existing project.\n\nBy following these steps, you’ll be able to create a new Vue project either through the command line using PowerShell or through the browser-based Vue UI. Both methods provide different workflows for project creation, allowing you to choose the one that suits your preferences and requirements."
  },
  {
    "objectID": "Installing Vue using Scoop.html",
    "href": "Installing Vue using Scoop.html",
    "title": "Installing Vue using Scoop",
    "section": "",
    "text": "Installing Vue using Scoop\nVue.js is a popular JavaScript framework for building user interfaces. By leveraging Scoop, a command-line package manager for Windows, you can quickly and easily install Vue.js and its associated tools on your Windows machine. In this guide, Ie’ll walk you through the simple steps to set up Vue.js using Scoop, enabling you to start developing Vue.js applications in no time.\nInstalling Vue.js using Scoop on Windows can be done in a few simple steps. Here’s a quick step-by-step guide:\n\nOpen a command prompt: Launch a command prompt or PowerShell window. You can do this by pressing Win + R, typing “cmd” or “powershell”, and hitting Enter.\nInstall Scoop: Copy-paste the following code into your PowerShell window:\nSet-ExecutionPolicy RemoteSigned -Scope CurrentUser # Optional: Needed to run a remote script the first time\nirm get.scoop.sh | iex\nIf that doesnt work, visit the Scoop website (https://scoop.sh) and follow the installation instructions to install Scoop on your Windows machine.\nInstall Node.js: To use Vue.js, you need to have Node.js installed. Install Node.js by running the following command in the command prompt:\nscoop install nodejs\nInstall Vue CLI: Vue CLI is a command-line tool that helps you scaffold and manage Vue.js projects. Install Vue CLI by running the following command:\nscoop install vue-cli\nVerify the installation: Once the installation is complete, you can verify that Vue CLI is installed correctly by running the following command:\nvue --version\nThis should display the version of Vue CLI installed on your system.\n\nCongratulations! You have successfully installed Vue.js using Scoop on your Windows machine. You can now start creating and developing Vue.js applications with the help of Vue CLI."
  },
  {
    "objectID": "Testing JavaScript Code in IntelliJ.html",
    "href": "Testing JavaScript Code in IntelliJ.html",
    "title": "Testing JavaScript Code in IntelliJ",
    "section": "",
    "text": "Testing JavaScript Code in IntelliJ\nIntelliJ IDEA provides a powerful and feature-rich development environment for JavaScript programming. In this quick guide, we’ll walk you through the simple steps to create a JavaScript project, write your code, and run it in a console using IntelliJ IDEA. Whether you’re a beginner or an experienced developer, this guide will help you get started with testing and executing your JavaScript applications seamlessly within the IDE\n\nLaunch IntelliJ IDEA and click on “File” -&gt; “New” -&gt; “Project”.\nIn the project creation window, make sure to select “JavaScript” as the project type or language. Click on “Create”.\nIntelliJ IDEA will create a new JavaScript file for you, named something like “hello.js”. This file will contain sample code.\nOpen the “hello.js” file and replace the sample code with your own JavaScript code. You can write any JavaScript code you want to test.\nRight-click on the “hello.js” file in the project explorer.\nFrom the context menu, select “Run” to execute your JavaScript code.\nIntelliJ IDEA will run your JavaScript file in a console window, and you’ll see the output of your code displayed in the console.\n\nThat’s it! You’ve successfully tested and run a JavaScript app in IntelliJ IDEA using a console. You can modify the JavaScript code in the “hello.js” file, re-run it, and observe the updated results in the console window.\nNote that this guide assumes you have already installed Node.js on your system, as it provides the runtime environment for executing JavaScript code."
  },
  {
    "objectID": "Vue Structure and Components.html",
    "href": "Vue Structure and Components.html",
    "title": "Introduction to Vue Components",
    "section": "",
    "text": "In this document, we will explore the fundamentals of Vue components, understanding their role in creating reusable UI elements. We’ll dive into the anatomy of a Vue file using a practical example, learn how to create new components, and explore their hierarchical tree structure, which promotes modularity and reusability in Vue applications.\n\n\nComponents in Vue.js are the building blocks of a Vue application’s user interface (UI). They encapsulate reusable and self-contained sections of UI logic and markup. Each component represents a distinct part of the application, such as a navigation bar, sidebar, or user profile.\nTo create a component in Vue, you define a template that contains the HTML markup, CSS styles, and JavaScript logic specific to that component. This encapsulation allows you to manage the UI functionality and appearance in a modular and organized manner.\nBy combining HTML, JavaScript, and CSS in a single file, Vue Single-File Components offer a cohesive and self-contained approach for defining components. This structure promotes better organization, readability, and maintainability of the code, making it easier to manage and develop complex Vue applications.\nComponents promote code reusability and maintainability. By breaking down the UI into smaller components, you can manage their behavior and appearance independently. This modular approach makes it easier to build complex interfaces and encourages a separation of concerns, as each component focuses on a specific functionality or visual element.\nBy leveraging the power of components, you can build modular and scalable UIs in Vue.js, where each component represents a specific UI element or functionality. This approach enhances code organization, reusability, and maintainability, enabling you to create robust and visually appealing applications.\n\n\n\nHere’s an example of a Vue Single-File Component (SFC) that demonstrates how HTML, JavaScript, and CSS can coexist in the same file:\n&lt;!-- The HTML section. This is also where other Vue components are defined--&gt;\n&lt;template&gt;\n  &lt;div class=\"component\"&gt;\n    &lt;h1&gt;{{ message }}&lt;/h1&gt;\n    &lt;button @click=\"incrementCount\"&gt;Click me&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;!-- The JavaScript section. All your logic and required Vue imports go here--&gt;\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      message: 'Hello, Vue!',\n      count: 0\n    };\n  },\n  methods: {\n    incrementCount() {\n      this.count++;\n    }\n  }\n};\n&lt;/script&gt;\n\n&lt;!-- The CSS section. You can refer to any components that you defined in your html.--&gt;\n&lt;style&gt;\n.component {\n  background-color: #f2f2f2;\n  padding: 20px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\nh1 {\n  color: #333;\n}\n&lt;/style&gt;\nIn this example, the file has a .vue extension and contains three sections:\n\nTemplate: The &lt;template&gt; section contains the HTML markup for the component. It defines a &lt;div&gt; element with a class of \"component\", an &lt;h1&gt; element that displays the message data property, and a &lt;button&gt; element with a click event listener that calls the incrementCount method.\nScript: The &lt;script&gt; section contains the JavaScript code for the component. It defines an object using export default syntax, which represents the Vue component. The data function initializes the message and count data properties. The methods object defines the incrementCount method, which increments the count property.\nStyle: The &lt;style&gt; section contains the CSS styles specific to the component. It applies styles to the .component class and the &lt;h1&gt; element within it.\n\n\n\n\nHere’s a quick guide on how to create a new component within the main App.vue file in a Vue.js application:\n\nOpen your Vue.js project and locate the App.vue file. This file serves as the entry point for your application and is typically found in the src or components directory.\nWithin the &lt;template&gt; section of App.vue, identify the area where you want to add the new component. For example, you might want to insert it below an existing element or create a new section.\nDefine the new component by using the &lt;script&gt; tag inside the App.vue file. Here’s an example of creating a component named MyComponent:\n&lt;script&gt;\nexport default {\n  name: 'MyComponent',\n  data() {\n    return {\n      message: 'Hello from MyComponent!'\n    };\n  }\n}\n&lt;/script&gt;\nIn the &lt;template&gt; section, use the newly created component by adding its tag within the desired location. Here’s an example of using the MyComponent component:\n&lt;template&gt;\n  &lt;div&gt;\n    &lt;!-- Existing code in App.vue --&gt;\n    &lt;h1&gt;Welcome to my Vue.js app!&lt;/h1&gt;\n    &lt;!-- New component usage --&gt;\n    &lt;MyComponent /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\nSave the changes to the App.vue file.\n\nBy following these steps, you have successfully created a new component within the main App.vue file. The component is defined using the &lt;script&gt; tag, and you can use it in the &lt;template&gt; section by adding its tag wherever you want it to appear. This approach allows you to create and integrate components within the main app file, making it easier to manage and structure your Vue.js application.\n\n\n\nIn Vue.js, components form a hierarchical tree structure, where parent components encapsulate and contain child components. This tree structure is based on the parent-child relationship between components and reflects the organization and composition of the user interface (UI). At the root of the tree is typically the main Vue instance, which represents the entire application. The main Vue instance serves as the root component and can contain multiple child components.\nAs the application grows, components are nested within each other, forming a tree-like structure. Each component can have its own template, data, methods, and lifecycle hooks. Child components can receive data from parent components via props and emit events to communicate changes back to the parent components. Here’s an example to illustrate the component tree structure:\n&lt;!-- App.vue with nested child componenets --&gt;\n&lt;template&gt;\n  &lt;div id=\"app\"&gt;\n    &lt;Header/&gt;\n    &lt;div id=\"main:\"&gt;\n      &lt;Sidebar/&gt;\n      &lt;Content/&gt;\n    &lt;/div&gt;\n    &lt;Footer/&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport Header from './components/Sidebar.vue';\nimport Sidebar from './components/Sidebar.vue';\nimport Content from './components/Content.vue';\n\nexport default {\n  name: 'App',\n  components: {\n    Sidebar,\n    Content\n  },\n  data() {\n    return {\n      title: 'My Vue App'\n    };\n  }\n};\n&lt;/script&gt;\nIn this example, the App component serves as the root component. It contains the header, main, and footer sections, which are child components. The App component also imports and registers the Sidebar and Content components as its child components using the components property.\nThe Sidebar and Content components are further nested within the main section of the App component. They can have their own template, data, and methods, allowing for encapsulation and reusability.\nThis hierarchical structure allows for composition and separation of concerns in Vue.js applications. It enables you to break down complex UIs into smaller, manageable components, each responsible for its specific functionality. The component tree structure facilitates communication and data flow between components, making it easier to develop and maintain Vue.js applications.\nCertainly! Here’s a tree view representation of the component structure in the example:\ngraph TB\n  A[App]\n  B[Header]\n  D[main]\n  E[Sidebar]\n  F[Content]\n  G[Footer]\n\n  A --&gt; B\n  A --&gt; D\n  D --&gt; E\n  D --&gt; F\n  A --&gt; G\n\n\n\nIn this tree view, each component is represented by its component name or HTML element. The indentation represents the nesting hierarchy, with the child components indented beneath their parent components. Here’s a breakdown of the component tree structure based on the example:\n\nApp is the root component.\n\nheader is a child component of App.\n\nh1 is a child component of header.\n\nmain is a div that contains child components.\n\nSidebar is a child component of main.\nContent is a child component of main.\n\nfooter is a child component of App.\n\np is a child component of footer."
  },
  {
    "objectID": "Vue Structure and Components.html#explanation-of-vue-components",
    "href": "Vue Structure and Components.html#explanation-of-vue-components",
    "title": "Introduction to Vue Components",
    "section": "",
    "text": "Components in Vue.js are the building blocks of a Vue application’s user interface (UI). They encapsulate reusable and self-contained sections of UI logic and markup. Each component represents a distinct part of the application, such as a navigation bar, sidebar, or user profile.\nTo create a component in Vue, you define a template that contains the HTML markup, CSS styles, and JavaScript logic specific to that component. This encapsulation allows you to manage the UI functionality and appearance in a modular and organized manner.\nBy combining HTML, JavaScript, and CSS in a single file, Vue Single-File Components offer a cohesive and self-contained approach for defining components. This structure promotes better organization, readability, and maintainability of the code, making it easier to manage and develop complex Vue applications.\nComponents promote code reusability and maintainability. By breaking down the UI into smaller components, you can manage their behavior and appearance independently. This modular approach makes it easier to build complex interfaces and encourages a separation of concerns, as each component focuses on a specific functionality or visual element.\nBy leveraging the power of components, you can build modular and scalable UIs in Vue.js, where each component represents a specific UI element or functionality. This approach enhances code organization, reusability, and maintainability, enabling you to create robust and visually appealing applications."
  },
  {
    "objectID": "Vue Structure and Components.html#example-vue-file",
    "href": "Vue Structure and Components.html#example-vue-file",
    "title": "Introduction to Vue Components",
    "section": "",
    "text": "Here’s an example of a Vue Single-File Component (SFC) that demonstrates how HTML, JavaScript, and CSS can coexist in the same file:\n&lt;!-- The HTML section. This is also where other Vue components are defined--&gt;\n&lt;template&gt;\n  &lt;div class=\"component\"&gt;\n    &lt;h1&gt;{{ message }}&lt;/h1&gt;\n    &lt;button @click=\"incrementCount\"&gt;Click me&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;!-- The JavaScript section. All your logic and required Vue imports go here--&gt;\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      message: 'Hello, Vue!',\n      count: 0\n    };\n  },\n  methods: {\n    incrementCount() {\n      this.count++;\n    }\n  }\n};\n&lt;/script&gt;\n\n&lt;!-- The CSS section. You can refer to any components that you defined in your html.--&gt;\n&lt;style&gt;\n.component {\n  background-color: #f2f2f2;\n  padding: 20px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\nh1 {\n  color: #333;\n}\n&lt;/style&gt;\nIn this example, the file has a .vue extension and contains three sections:\n\nTemplate: The &lt;template&gt; section contains the HTML markup for the component. It defines a &lt;div&gt; element with a class of \"component\", an &lt;h1&gt; element that displays the message data property, and a &lt;button&gt; element with a click event listener that calls the incrementCount method.\nScript: The &lt;script&gt; section contains the JavaScript code for the component. It defines an object using export default syntax, which represents the Vue component. The data function initializes the message and count data properties. The methods object defines the incrementCount method, which increments the count property.\nStyle: The &lt;style&gt; section contains the CSS styles specific to the component. It applies styles to the .component class and the &lt;h1&gt; element within it."
  },
  {
    "objectID": "Vue Structure and Components.html#create-a-new-component",
    "href": "Vue Structure and Components.html#create-a-new-component",
    "title": "Introduction to Vue Components",
    "section": "",
    "text": "Here’s a quick guide on how to create a new component within the main App.vue file in a Vue.js application:\n\nOpen your Vue.js project and locate the App.vue file. This file serves as the entry point for your application and is typically found in the src or components directory.\nWithin the &lt;template&gt; section of App.vue, identify the area where you want to add the new component. For example, you might want to insert it below an existing element or create a new section.\nDefine the new component by using the &lt;script&gt; tag inside the App.vue file. Here’s an example of creating a component named MyComponent:\n&lt;script&gt;\nexport default {\n  name: 'MyComponent',\n  data() {\n    return {\n      message: 'Hello from MyComponent!'\n    };\n  }\n}\n&lt;/script&gt;\nIn the &lt;template&gt; section, use the newly created component by adding its tag within the desired location. Here’s an example of using the MyComponent component:\n&lt;template&gt;\n  &lt;div&gt;\n    &lt;!-- Existing code in App.vue --&gt;\n    &lt;h1&gt;Welcome to my Vue.js app!&lt;/h1&gt;\n    &lt;!-- New component usage --&gt;\n    &lt;MyComponent /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\nSave the changes to the App.vue file.\n\nBy following these steps, you have successfully created a new component within the main App.vue file. The component is defined using the &lt;script&gt; tag, and you can use it in the &lt;template&gt; section by adding its tag wherever you want it to appear. This approach allows you to create and integrate components within the main app file, making it easier to manage and structure your Vue.js application."
  },
  {
    "objectID": "Vue Structure and Components.html#tree-structure-of-components",
    "href": "Vue Structure and Components.html#tree-structure-of-components",
    "title": "Introduction to Vue Components",
    "section": "",
    "text": "In Vue.js, components form a hierarchical tree structure, where parent components encapsulate and contain child components. This tree structure is based on the parent-child relationship between components and reflects the organization and composition of the user interface (UI). At the root of the tree is typically the main Vue instance, which represents the entire application. The main Vue instance serves as the root component and can contain multiple child components.\nAs the application grows, components are nested within each other, forming a tree-like structure. Each component can have its own template, data, methods, and lifecycle hooks. Child components can receive data from parent components via props and emit events to communicate changes back to the parent components. Here’s an example to illustrate the component tree structure:\n&lt;!-- App.vue with nested child componenets --&gt;\n&lt;template&gt;\n  &lt;div id=\"app\"&gt;\n    &lt;Header/&gt;\n    &lt;div id=\"main:\"&gt;\n      &lt;Sidebar/&gt;\n      &lt;Content/&gt;\n    &lt;/div&gt;\n    &lt;Footer/&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport Header from './components/Sidebar.vue';\nimport Sidebar from './components/Sidebar.vue';\nimport Content from './components/Content.vue';\n\nexport default {\n  name: 'App',\n  components: {\n    Sidebar,\n    Content\n  },\n  data() {\n    return {\n      title: 'My Vue App'\n    };\n  }\n};\n&lt;/script&gt;\nIn this example, the App component serves as the root component. It contains the header, main, and footer sections, which are child components. The App component also imports and registers the Sidebar and Content components as its child components using the components property.\nThe Sidebar and Content components are further nested within the main section of the App component. They can have their own template, data, and methods, allowing for encapsulation and reusability.\nThis hierarchical structure allows for composition and separation of concerns in Vue.js applications. It enables you to break down complex UIs into smaller, manageable components, each responsible for its specific functionality. The component tree structure facilitates communication and data flow between components, making it easier to develop and maintain Vue.js applications.\nCertainly! Here’s a tree view representation of the component structure in the example:\ngraph TB\n  A[App]\n  B[Header]\n  D[main]\n  E[Sidebar]\n  F[Content]\n  G[Footer]\n\n  A --&gt; B\n  A --&gt; D\n  D --&gt; E\n  D --&gt; F\n  A --&gt; G\n\n\n\nIn this tree view, each component is represented by its component name or HTML element. The indentation represents the nesting hierarchy, with the child components indented beneath their parent components. Here’s a breakdown of the component tree structure based on the example:\n\nApp is the root component.\n\nheader is a child component of App.\n\nh1 is a child component of header.\n\nmain is a div that contains child components.\n\nSidebar is a child component of main.\nContent is a child component of main.\n\nfooter is a child component of App.\n\np is a child component of footer."
  },
  {
    "objectID": "Writing Unit Test with JUnit.html",
    "href": "Writing Unit Test with JUnit.html",
    "title": "Writing Unit Test with JUnit",
    "section": "",
    "text": "To use JUnit you need to import in your build.gradle:\ndependencies {\n    testImplementation(platform('org.junit:junit-bom:5.9.0'))\n    testImplementation('org.junit.jupiter:junit-jupiter')\n}\n\ntest {\n    useJUnitPlatform()\n}\n\n\nMake sure that IntelliJ is allowed to run all the test:\n\n\n\nimage-20220823121445487\n\n\nThis setting can be found in Settings → Build, Execution, Deployment → Gradle.\n\n\n\n\n\n\nimage-20220823113329035\n\n\nCtrl + Shift + T to automatically create a test class\n\n\n\nimage-20220823113410346\n\n\n\n\n\nYou should create a test folder in the root of your project src and then mirror your package structure:\n\n\n\nimage-20220823113426910\n\n\n\n\n\n\nEach method should always test on thing only.\nUse @Test annotation to tell JUnit that the method is a unit test\nUse an assert method to test a case.\nChoose the wording of your test method to use should \n\n\n\n\nimage-20220823113500672\n\n\n\n\n\nimage-20220823113535102\n\n\nPassed test can be seen in IntelliJ on the left side of the gutter:\n\n\n\nimage-20220823113656914\n\n\n\n\n\nimage-20220823113546169\n\n\n\n\n\nimage-20220823113746013\n\n\n\n\n\nimage-20220823113843771\n\n\n\n\n\nimage-20220823113915560\n\n\n\n\n\nimage-20220823113940365"
  },
  {
    "objectID": "Writing Unit Test with JUnit.html#intellij-setup",
    "href": "Writing Unit Test with JUnit.html#intellij-setup",
    "title": "Writing Unit Test with JUnit",
    "section": "",
    "text": "Make sure that IntelliJ is allowed to run all the test:\n\n\n\nimage-20220823121445487\n\n\nThis setting can be found in Settings → Build, Execution, Deployment → Gradle."
  },
  {
    "objectID": "Writing Unit Test with JUnit.html#create-a-new-test-class",
    "href": "Writing Unit Test with JUnit.html#create-a-new-test-class",
    "title": "Writing Unit Test with JUnit",
    "section": "",
    "text": "image-20220823113329035\n\n\nCtrl + Shift + T to automatically create a test class\n\n\n\nimage-20220823113410346"
  },
  {
    "objectID": "Writing Unit Test with JUnit.html#setup-testing-directories-in-project",
    "href": "Writing Unit Test with JUnit.html#setup-testing-directories-in-project",
    "title": "Writing Unit Test with JUnit",
    "section": "",
    "text": "You should create a test folder in the root of your project src and then mirror your package structure:\n\n\n\nimage-20220823113426910"
  },
  {
    "objectID": "Writing Unit Test with JUnit.html#setting-up-test-method",
    "href": "Writing Unit Test with JUnit.html#setting-up-test-method",
    "title": "Writing Unit Test with JUnit",
    "section": "",
    "text": "Each method should always test on thing only.\nUse @Test annotation to tell JUnit that the method is a unit test\nUse an assert method to test a case.\nChoose the wording of your test method to use should \n\n\n\n\nimage-20220823113500672\n\n\n\n\n\nimage-20220823113535102\n\n\nPassed test can be seen in IntelliJ on the left side of the gutter:\n\n\n\nimage-20220823113656914\n\n\n\n\n\nimage-20220823113546169\n\n\n\n\n\nimage-20220823113746013\n\n\n\n\n\nimage-20220823113843771\n\n\n\n\n\nimage-20220823113915560\n\n\n\n\n\nimage-20220823113940365"
  },
  {
    "objectID": "posts/Writing Unit Test with JUnit.html",
    "href": "posts/Writing Unit Test with JUnit.html",
    "title": "Writing Unit Test with JUnit",
    "section": "",
    "text": "To use JUnit you need to import in your build.gradle:\ndependencies {\n    testImplementation(platform('org.junit:junit-bom:5.9.0'))\n    testImplementation('org.junit.jupiter:junit-jupiter')\n}\n\ntest {\n    useJUnitPlatform()\n}\n\n\nMake sure that IntelliJ is allowed to run all the test:\n\n\n\nimage-20220823121445487\n\n\nThis setting can be found in Settings → Build, Execution, Deployment → Gradle.\n\n\n\n\n\n\nimage-20220823113329035\n\n\nCtrl + Shift + T to automatically create a test class\n\n\n\nimage-20220823113410346\n\n\n\n\n\nYou should create a test folder in the root of your project src and then mirror your package structure:\n\n\n\nimage-20220823113426910\n\n\n\n\n\n\nEach method should always test on thing only.\nUse @Test annotation to tell JUnit that the method is a unit test\nUse an assert method to test a case.\nChoose the wording of your test method to use should \n\n\n\n\nimage-20220823113500672\n\n\n\n\n\nimage-20220823113535102\n\n\nPassed test can be seen in IntelliJ on the left side of the gutter:\n\n\n\nimage-20220823113656914\n\n\n\n\n\nimage-20220823113546169\n\n\n\n\n\nimage-20220823113746013\n\n\n\n\n\nimage-20220823113843771\n\n\n\n\n\nimage-20220823113915560\n\n\n\n\n\nimage-20220823113940365"
  },
  {
    "objectID": "posts/Writing Unit Test with JUnit.html#intellij-setup",
    "href": "posts/Writing Unit Test with JUnit.html#intellij-setup",
    "title": "Writing Unit Test with JUnit",
    "section": "",
    "text": "Make sure that IntelliJ is allowed to run all the test:\n\n\n\nimage-20220823121445487\n\n\nThis setting can be found in Settings → Build, Execution, Deployment → Gradle."
  },
  {
    "objectID": "posts/Writing Unit Test with JUnit.html#create-a-new-test-class",
    "href": "posts/Writing Unit Test with JUnit.html#create-a-new-test-class",
    "title": "Writing Unit Test with JUnit",
    "section": "",
    "text": "image-20220823113329035\n\n\nCtrl + Shift + T to automatically create a test class\n\n\n\nimage-20220823113410346"
  },
  {
    "objectID": "posts/Writing Unit Test with JUnit.html#setup-testing-directories-in-project",
    "href": "posts/Writing Unit Test with JUnit.html#setup-testing-directories-in-project",
    "title": "Writing Unit Test with JUnit",
    "section": "",
    "text": "You should create a test folder in the root of your project src and then mirror your package structure:\n\n\n\nimage-20220823113426910"
  },
  {
    "objectID": "posts/Writing Unit Test with JUnit.html#setting-up-test-method",
    "href": "posts/Writing Unit Test with JUnit.html#setting-up-test-method",
    "title": "Writing Unit Test with JUnit",
    "section": "",
    "text": "Each method should always test on thing only.\nUse @Test annotation to tell JUnit that the method is a unit test\nUse an assert method to test a case.\nChoose the wording of your test method to use should \n\n\n\n\nimage-20220823113500672\n\n\n\n\n\nimage-20220823113535102\n\n\nPassed test can be seen in IntelliJ on the left side of the gutter:\n\n\n\nimage-20220823113656914\n\n\n\n\n\nimage-20220823113546169\n\n\n\n\n\nimage-20220823113746013\n\n\n\n\n\nimage-20220823113843771\n\n\n\n\n\nimage-20220823113915560\n\n\n\n\n\nimage-20220823113940365"
  },
  {
    "objectID": "posts/Create a new Vue Project.html",
    "href": "posts/Create a new Vue Project.html",
    "title": "Create a new Vue Project",
    "section": "",
    "text": "Create a new Vue Project\nCreating a new Vue project is a straightforward process that offers flexibility in terms of command-line or browser-based approaches. Whether you prefer using PowerShell or Vue UI, this guide will walk you through the steps to create a new Vue project, allowing you to start building dynamic and interactive web applications using Vue.js.\n\nCreate a new Vue project\n\nOpen PowerShell or a command prompt.\nNavigate to the folder where you want to create your project.\nRun the following command:\nvue create project-name\nReplace project-name with the desired name for your project.\nChoose an installation option by selecting from the available presets or manually selecting features.\nOnce the project is created, navigate into the project folder using cd project-name.\nTo run the application, use the command:\nyarn serve\nThis will start a development server, and you can access your Vue application in the browser.\n\n\n\nCreate a Vue project using Vue UI\n\nOpen PowerShell or a command prompt.\nRun the following command:\nvue ui\nThis will start the Vue UI interface in your default browser.\nFollow the on-screen instructions to set up a new project using the Vue UI. You can create a project from scratch or import an existing project.\n\nBy following these steps, you’ll be able to create a new Vue project either through the command line using PowerShell or through the browser-based Vue UI. Both methods provide different workflows for project creation, allowing you to choose the one that suits your preferences and requirements."
  },
  {
    "objectID": "posts/Installing Vue using Scoop.html",
    "href": "posts/Installing Vue using Scoop.html",
    "title": "Installing Vue using Scoop",
    "section": "",
    "text": "Installing Vue using Scoop\nVue.js is a popular JavaScript framework for building user interfaces. By leveraging Scoop, a command-line package manager for Windows, you can quickly and easily install Vue.js and its associated tools on your Windows machine. In this guide, Ie’ll walk you through the simple steps to set up Vue.js using Scoop, enabling you to start developing Vue.js applications in no time.\nInstalling Vue.js using Scoop on Windows can be done in a few simple steps. Here’s a quick step-by-step guide:\n\nOpen a command prompt: Launch a command prompt or PowerShell window. You can do this by pressing Win + R, typing “cmd” or “powershell”, and hitting Enter.\nInstall Scoop: Copy-paste the following code into your PowerShell window:\nSet-ExecutionPolicy RemoteSigned -Scope CurrentUser\nirm get.scoop.sh | iex\nIf that doesnt work, visit the Scoop website (https://scoop.sh) and follow the installation instructions to install Scoop on your Windows machine.\nInstall Node.js: To use Vue.js, you need to have Node.js installed. Install Node.js by running the following command in the command prompt:\nscoop install nodejs\nInstall Vue CLI: Vue CLI is a command-line tool that helps you scaffold and manage Vue.js projects. Install Vue CLI by running the following command:\nscoop install vue-cli\nVerify the installation: Once the installation is complete, you can verify that Vue CLI is installed correctly by running the following command:\nvue --version\nThis should display the version of Vue CLI installed on your system.\n\nCongratulations! You have successfully installed Vue.js using Scoop on your Windows machine. You can now start creating and developing Vue.js applications with the help of Vue CLI."
  },
  {
    "objectID": "posts/Testing JavaScript Code in IntelliJ.html",
    "href": "posts/Testing JavaScript Code in IntelliJ.html",
    "title": "Testing JavaScript Code in IntelliJ",
    "section": "",
    "text": "Testing JavaScript Code in IntelliJ\nIntelliJ IDEA provides a powerful and feature-rich development environment for JavaScript programming. In this quick guide, we’ll walk you through the simple steps to create a JavaScript project, write your code, and run it in a console using IntelliJ IDEA. Whether you’re a beginner or an experienced developer, this guide will help you get started with testing and executing your JavaScript applications seamlessly within the IDE\n\nLaunch IntelliJ IDEA and click on “File” -&gt; “New” -&gt; “Project”.\nIn the project creation window, make sure to select “JavaScript” as the project type or language. Click on “Create”.\nIntelliJ IDEA will create a new JavaScript file for you, named something like “hello.js”. This file will contain sample code.\nOpen the “hello.js” file and replace the sample code with your own JavaScript code. You can write any JavaScript code you want to test.\nRight-click on the “hello.js” file in the project explorer.\nFrom the context menu, select “Run” to execute your JavaScript code.\nIntelliJ IDEA will run your JavaScript file in a console window, and you’ll see the output of your code displayed in the console.\n\nThat’s it! You’ve successfully tested and run a JavaScript app in IntelliJ IDEA using a console. You can modify the JavaScript code in the “hello.js” file, re-run it, and observe the updated results in the console window.\nNote that this guide assumes you have already installed Node.js on your system, as it provides the runtime environment for executing JavaScript code."
  },
  {
    "objectID": "posts/Vue Structure and Components.html",
    "href": "posts/Vue Structure and Components.html",
    "title": "Introduction to Vue Components",
    "section": "",
    "text": "In this document, we will explore the fundamentals of Vue components, understanding their role in creating reusable UI elements. We’ll dive into the anatomy of a Vue file using a practical example, learn how to create new components, and explore their hierarchical tree structure, which promotes modularity and reusability in Vue applications.\n\n\nComponents in Vue.js are the building blocks of a Vue application’s user interface (UI). They encapsulate reusable and self-contained sections of UI logic and markup. Each component represents a distinct part of the application, such as a navigation bar, sidebar, or user profile.\nTo create a component in Vue, you define a template that contains the HTML markup, CSS styles, and JavaScript logic specific to that component. This encapsulation allows you to manage the UI functionality and appearance in a modular and organized manner.\nBy combining HTML, JavaScript, and CSS in a single file, Vue Single-File Components offer a cohesive and self-contained approach for defining components. This structure promotes better organization, readability, and maintainability of the code, making it easier to manage and develop complex Vue applications.\nComponents promote code reusability and maintainability. By breaking down the UI into smaller components, you can manage their behavior and appearance independently. This modular approach makes it easier to build complex interfaces and encourages a separation of concerns, as each component focuses on a specific functionality or visual element.\nBy leveraging the power of components, you can build modular and scalable UIs in Vue.js, where each component represents a specific UI element or functionality. This approach enhances code organization, reusability, and maintainability, enabling you to create robust and visually appealing applications.\n\n\n\nHere’s an example of a Vue Single-File Component (SFC) that demonstrates how HTML, JavaScript, and CSS can coexist in the same file:\n&lt;!-- The HTML section. This is also where other Vue components are defined--&gt;\n&lt;template&gt;\n  &lt;div class=\"component\"&gt;\n    &lt;h1&gt;{{ message }}&lt;/h1&gt;\n    &lt;button @click=\"incrementCount\"&gt;Click me&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;!-- The JavaScript section. All your logic and required Vue imports go here--&gt;\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      message: 'Hello, Vue!',\n      count: 0\n    };\n  },\n  methods: {\n    incrementCount() {\n      this.count++;\n    }\n  }\n};\n&lt;/script&gt;\n\n&lt;!-- The CSS section. You can refer to any components that you defined in your html.--&gt;\n&lt;style&gt;\n.component {\n  background-color: #f2f2f2;\n  padding: 20px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\nh1 {\n  color: #333;\n}\n&lt;/style&gt;\nIn this example, the file has a .vue extension and contains three sections:\n\nTemplate: The &lt;template&gt; section contains the HTML markup for the component. It defines a &lt;div&gt; element with a class of \"component\", an &lt;h1&gt; element that displays the message data property, and a &lt;button&gt; element with a click event listener that calls the incrementCount method.\nScript: The &lt;script&gt; section contains the JavaScript code for the component. It defines an object using export default syntax, which represents the Vue component. The data function initializes the message and count data properties. The methods object defines the incrementCount method, which increments the count property.\nStyle: The &lt;style&gt; section contains the CSS styles specific to the component. It applies styles to the .component class and the &lt;h1&gt; element within it.\n\n\n\n\nHere’s a quick guide on how to create a new component within the main App.vue file in a Vue.js application:\n\nOpen your Vue.js project and locate the App.vue file. This file serves as the entry point for your application and is typically found in the src or components directory.\nWithin the &lt;template&gt; section of App.vue, identify the area where you want to add the new component. For example, you might want to insert it below an existing element or create a new section.\nDefine the new component by using the &lt;script&gt; tag inside the App.vue file. Here’s an example of creating a component named MyComponent:\n&lt;script&gt;\nexport default {\n  name: 'MyComponent',\n  data() {\n    return {\n      message: 'Hello from MyComponent!'\n    };\n  }\n}\n&lt;/script&gt;\nIn the &lt;template&gt; section, use the newly created component by adding its tag within the desired location. Here’s an example of using the MyComponent component:\n&lt;template&gt;\n  &lt;div&gt;\n    &lt;!-- Existing code in App.vue --&gt;\n    &lt;h1&gt;Welcome to my Vue.js app!&lt;/h1&gt;\n    &lt;!-- New component usage --&gt;\n    &lt;MyComponent /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\nSave the changes to the App.vue file.\n\nBy following these steps, you have successfully created a new component within the main App.vue file. The component is defined using the &lt;script&gt; tag, and you can use it in the &lt;template&gt; section by adding its tag wherever you want it to appear. This approach allows you to create and integrate components within the main app file, making it easier to manage and structure your Vue.js application.\n\n\n\nIn Vue.js, components form a hierarchical tree structure, where parent components encapsulate and contain child components. This tree structure is based on the parent-child relationship between components and reflects the organization and composition of the user interface (UI). At the root of the tree is typically the main Vue instance, which represents the entire application. The main Vue instance serves as the root component and can contain multiple child components.\nAs the application grows, components are nested within each other, forming a tree-like structure. Each component can have its own template, data, methods, and lifecycle hooks. Child components can receive data from parent components via props and emit events to communicate changes back to the parent components. Here’s an example to illustrate the component tree structure:\n&lt;!-- App.vue with nested child componenets --&gt;\n&lt;template&gt;\n  &lt;div id=\"app\"&gt;\n    &lt;Header/&gt;\n    &lt;div id=\"main:\"&gt;\n      &lt;Sidebar/&gt;\n      &lt;Content/&gt;\n    &lt;/div&gt;\n    &lt;Footer/&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport Header from './components/Sidebar.vue';\nimport Sidebar from './components/Sidebar.vue';\nimport Content from './components/Content.vue';\n\nexport default {\n  name: 'App',\n  components: {\n    Sidebar,\n    Content\n  },\n  data() {\n    return {\n      title: 'My Vue App'\n    };\n  }\n};\n&lt;/script&gt;\nIn this example, the App component serves as the root component. It contains the header, main, and footer sections, which are child components. The App component also imports and registers the Sidebar and Content components as its child components using the components property.\nThe Sidebar and Content components are further nested within the main section of the App component. They can have their own template, data, and methods, allowing for encapsulation and reusability.\nThis hierarchical structure allows for composition and separation of concerns in Vue.js applications. It enables you to break down complex UIs into smaller, manageable components, each responsible for its specific functionality. The component tree structure facilitates communication and data flow between components, making it easier to develop and maintain Vue.js applications.\nHere’s a tree view representation of the component structure in the example:\ngraph TB\n  A[App]\n  B[Header]\n  D[main]\n  E[Sidebar]\n  F[Content]\n  G[Footer]\n\n  A --&gt; B\n  A --&gt; D\n  D --&gt; E\n  D --&gt; F\n  A --&gt; G\n\n\n\nIn this tree view, each component is represented by its component name or HTML element. The indentation represents the nesting hierarchy, with the child components indented beneath their parent components. Here’s a breakdown of the component tree structure based on the example:\n\nApp is the root component.\n\nheader is a child component of App.\n\nh1 is a child component of header.\n\nmain is a div that contains child components.\n\nSidebar is a child component of main.\nContent is a child component of main.\n\nfooter is a child component of App.\n\np is a child component of footer."
  },
  {
    "objectID": "posts/Vue Structure and Components.html#explanation-of-vue-components",
    "href": "posts/Vue Structure and Components.html#explanation-of-vue-components",
    "title": "Introduction to Vue Components",
    "section": "",
    "text": "Components in Vue.js are the building blocks of a Vue application’s user interface (UI). They encapsulate reusable and self-contained sections of UI logic and markup. Each component represents a distinct part of the application, such as a navigation bar, sidebar, or user profile.\nTo create a component in Vue, you define a template that contains the HTML markup, CSS styles, and JavaScript logic specific to that component. This encapsulation allows you to manage the UI functionality and appearance in a modular and organized manner.\nBy combining HTML, JavaScript, and CSS in a single file, Vue Single-File Components offer a cohesive and self-contained approach for defining components. This structure promotes better organization, readability, and maintainability of the code, making it easier to manage and develop complex Vue applications.\nComponents promote code reusability and maintainability. By breaking down the UI into smaller components, you can manage their behavior and appearance independently. This modular approach makes it easier to build complex interfaces and encourages a separation of concerns, as each component focuses on a specific functionality or visual element.\nBy leveraging the power of components, you can build modular and scalable UIs in Vue.js, where each component represents a specific UI element or functionality. This approach enhances code organization, reusability, and maintainability, enabling you to create robust and visually appealing applications."
  },
  {
    "objectID": "posts/Vue Structure and Components.html#example-vue-file",
    "href": "posts/Vue Structure and Components.html#example-vue-file",
    "title": "Introduction to Vue Components",
    "section": "",
    "text": "Here’s an example of a Vue Single-File Component (SFC) that demonstrates how HTML, JavaScript, and CSS can coexist in the same file:\n&lt;!-- The HTML section. This is also where other Vue components are defined--&gt;\n&lt;template&gt;\n  &lt;div class=\"component\"&gt;\n    &lt;h1&gt;{{ message }}&lt;/h1&gt;\n    &lt;button @click=\"incrementCount\"&gt;Click me&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;!-- The JavaScript section. All your logic and required Vue imports go here--&gt;\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      message: 'Hello, Vue!',\n      count: 0\n    };\n  },\n  methods: {\n    incrementCount() {\n      this.count++;\n    }\n  }\n};\n&lt;/script&gt;\n\n&lt;!-- The CSS section. You can refer to any components that you defined in your html.--&gt;\n&lt;style&gt;\n.component {\n  background-color: #f2f2f2;\n  padding: 20px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\nh1 {\n  color: #333;\n}\n&lt;/style&gt;\nIn this example, the file has a .vue extension and contains three sections:\n\nTemplate: The &lt;template&gt; section contains the HTML markup for the component. It defines a &lt;div&gt; element with a class of \"component\", an &lt;h1&gt; element that displays the message data property, and a &lt;button&gt; element with a click event listener that calls the incrementCount method.\nScript: The &lt;script&gt; section contains the JavaScript code for the component. It defines an object using export default syntax, which represents the Vue component. The data function initializes the message and count data properties. The methods object defines the incrementCount method, which increments the count property.\nStyle: The &lt;style&gt; section contains the CSS styles specific to the component. It applies styles to the .component class and the &lt;h1&gt; element within it."
  },
  {
    "objectID": "posts/Vue Structure and Components.html#create-a-new-component",
    "href": "posts/Vue Structure and Components.html#create-a-new-component",
    "title": "Introduction to Vue Components",
    "section": "",
    "text": "Here’s a quick guide on how to create a new component within the main App.vue file in a Vue.js application:\n\nOpen your Vue.js project and locate the App.vue file. This file serves as the entry point for your application and is typically found in the src or components directory.\nWithin the &lt;template&gt; section of App.vue, identify the area where you want to add the new component. For example, you might want to insert it below an existing element or create a new section.\nDefine the new component by using the &lt;script&gt; tag inside the App.vue file. Here’s an example of creating a component named MyComponent:\n&lt;script&gt;\nexport default {\n  name: 'MyComponent',\n  data() {\n    return {\n      message: 'Hello from MyComponent!'\n    };\n  }\n}\n&lt;/script&gt;\nIn the &lt;template&gt; section, use the newly created component by adding its tag within the desired location. Here’s an example of using the MyComponent component:\n&lt;template&gt;\n  &lt;div&gt;\n    &lt;!-- Existing code in App.vue --&gt;\n    &lt;h1&gt;Welcome to my Vue.js app!&lt;/h1&gt;\n    &lt;!-- New component usage --&gt;\n    &lt;MyComponent /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\nSave the changes to the App.vue file.\n\nBy following these steps, you have successfully created a new component within the main App.vue file. The component is defined using the &lt;script&gt; tag, and you can use it in the &lt;template&gt; section by adding its tag wherever you want it to appear. This approach allows you to create and integrate components within the main app file, making it easier to manage and structure your Vue.js application."
  },
  {
    "objectID": "posts/Vue Structure and Components.html#tree-structure-of-components",
    "href": "posts/Vue Structure and Components.html#tree-structure-of-components",
    "title": "Introduction to Vue Components",
    "section": "",
    "text": "In Vue.js, components form a hierarchical tree structure, where parent components encapsulate and contain child components. This tree structure is based on the parent-child relationship between components and reflects the organization and composition of the user interface (UI). At the root of the tree is typically the main Vue instance, which represents the entire application. The main Vue instance serves as the root component and can contain multiple child components.\nAs the application grows, components are nested within each other, forming a tree-like structure. Each component can have its own template, data, methods, and lifecycle hooks. Child components can receive data from parent components via props and emit events to communicate changes back to the parent components. Here’s an example to illustrate the component tree structure:\n&lt;!-- App.vue with nested child componenets --&gt;\n&lt;template&gt;\n  &lt;div id=\"app\"&gt;\n    &lt;Header/&gt;\n    &lt;div id=\"main:\"&gt;\n      &lt;Sidebar/&gt;\n      &lt;Content/&gt;\n    &lt;/div&gt;\n    &lt;Footer/&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport Header from './components/Sidebar.vue';\nimport Sidebar from './components/Sidebar.vue';\nimport Content from './components/Content.vue';\n\nexport default {\n  name: 'App',\n  components: {\n    Sidebar,\n    Content\n  },\n  data() {\n    return {\n      title: 'My Vue App'\n    };\n  }\n};\n&lt;/script&gt;\nIn this example, the App component serves as the root component. It contains the header, main, and footer sections, which are child components. The App component also imports and registers the Sidebar and Content components as its child components using the components property.\nThe Sidebar and Content components are further nested within the main section of the App component. They can have their own template, data, and methods, allowing for encapsulation and reusability.\nThis hierarchical structure allows for composition and separation of concerns in Vue.js applications. It enables you to break down complex UIs into smaller, manageable components, each responsible for its specific functionality. The component tree structure facilitates communication and data flow between components, making it easier to develop and maintain Vue.js applications.\nHere’s a tree view representation of the component structure in the example:\ngraph TB\n  A[App]\n  B[Header]\n  D[main]\n  E[Sidebar]\n  F[Content]\n  G[Footer]\n\n  A --&gt; B\n  A --&gt; D\n  D --&gt; E\n  D --&gt; F\n  A --&gt; G\n\n\n\nIn this tree view, each component is represented by its component name or HTML element. The indentation represents the nesting hierarchy, with the child components indented beneath their parent components. Here’s a breakdown of the component tree structure based on the example:\n\nApp is the root component.\n\nheader is a child component of App.\n\nh1 is a child component of header.\n\nmain is a div that contains child components.\n\nSidebar is a child component of main.\nContent is a child component of main.\n\nfooter is a child component of App.\n\np is a child component of footer."
  }
]